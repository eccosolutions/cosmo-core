/*
 * Copyright 2006-2007 Open Source Applications Foundation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.osaf.cosmo.atom.generator;

import java.util.SortedSet;

import org.apache.abdera.model.Entry;
import org.apache.abdera.model.Feed;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.osaf.cosmo.model.CollectionItem;
import org.osaf.cosmo.model.Item;
import org.osaf.cosmo.model.NoteItem;
import org.osaf.cosmo.model.filter.EventStampFilter;
import org.osaf.cosmo.model.filter.ItemFilter;
import org.osaf.cosmo.server.ServiceLocator;

/**
 * A class that generates basic Atom feeds whose content are formatted
 * in HTML/hCalendar.
 *
 * @see Feed
 * @see CollectionItem
 */
public class BasicFeedGenerator extends BaseItemFeedGenerator {
    private static final Log log = LogFactory.getLog(BasicFeedGenerator.class);

    /** */
    public BasicFeedGenerator(StandardGeneratorFactory factory,
                              ServiceLocator locator) {
        super(factory, locator);
    }

    /**
     * <p>
     * Overrides the superclass method to exclude the master item from
     * the occurrence set.
     * </p>
     *
     * @param the item whose contents are to be listed
     */
    protected SortedSet<NoteItem> findOccurrences(NoteItem item) {
        ItemFilter filter = getFilter();
        if (filter != null)
            filter.setFilterProperty(EventStampFilter.PROPERTY_INCLUDE_MASTER_ITEMS,
                                     "false");
        return super.findOccurrences(item);
    }

    /**
     * <p>
     * Augments the feed created by the superclass as follows:
     * </p>
     * <ul>
     * <li>Adds a PIM link</li>
     * <li>Removes the author URI, as the one generated by the superclass
     * is not useful to feed readers</li>
     * </ul>
     *
     * @param collection the collection on which the feed is based
     * @throws GeneratorException
     */
    protected Feed createFeed(CollectionItem collection)
        throws GeneratorException {
        Feed feed = super.createFeed(collection);

        feed.addLink(newPimLink(collection));

        if (feed.getAuthor() != null)
            feed.getAuthor().setUri(null);

        return feed;
    }

    /**
     * <p>
     * Augments the entry created by the superclass as follows:
     * </p>
     * <ul>
     * <li>Removes the author URI, as the one generated by the superclass
     * is not useful to feed readers</li>
     * </ul>
     *
     * @param item the item on which the entry is based
     * @param isDocument whether or not the entry represents an entire
     * document or is attached to a feed document
     * @throws GeneratorException
     */
    protected Entry createEntry(NoteItem item,
                                boolean isDocument)
        throws GeneratorException {
        Entry entry = super.createEntry(item, isDocument);

        if (entry.getAuthor() != null)
            entry.getAuthor().setUri(null);

        return entry;
    }

    /**
     * Sets HTML entry content and plain text entry summary. Ignores
     * recurrence.
     */
    protected void setEntryContent(Entry entry,
                                   NoteItem item)
        throws GeneratorException {
        ContentBean content = getFactory().getContentFactory().
            createContent(FORMAT_HTML, item);
        if (content != null)
            entry.setContentAsHtml(content.getValue());

        ContentBean summary = getFactory().getContentFactory().
            createContent(FORMAT_TEXT, item);
        if (summary != null)
            entry.setSummary(summary.getValue());
    }

    /**
     * Returns {@link AtomConstants#PROJECTION_BASIC}.
     */
    protected String getProjection() {
        return PROJECTION_BASIC;
    }

    /**
     * Returns the IRI of the given item without path info.
     *
     * @param item the item
     */
    protected String selfIri(Item item) {
        return selfIri(item, false);
    }
}
