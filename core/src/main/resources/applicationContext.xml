<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2005-2006 Open Source Applications Foundation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.xsd">

  <bean id="messageSource"
        class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="MessageResources"/>
  </bean>

  <!-- load the cosmo properties file and make the cosmo
       config properties available to other spring beans -->
  <jee:jndi-lookup id="cosmoConfigPath" jndi-name="java:comp/env/cosmo/config"/>

  <bean id="propertyPlaceholderConfigurer"
        class="org.osaf.cosmo.spring.CosmoPropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <ref local="cosmoConfigPath"/>
      </list>
    </property>
  </bean>

  <!-- resources needed to send mail -->
  <jee:jndi-lookup id="mailSession" jndi-name="java:comp/env/mail/cosmo"/>

  <bean id="mailSender"
        class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="session">
      <ref local="mailSession"/>
    </property>
  </bean>

  <!-- resources needed for database access -->
  <jee:jndi-lookup id="jdbcDataSource" jndi-name="java:comp/env/jdbc/cosmo"/>

  <bean id="defaultLobHandler"
        class="org.osaf.cosmo.hibernate.CosmoLobHandler">
  </bean>

  <bean id="validatePreUpdateEventListener"
      class="org.hibernate.validator.event.ValidatePreUpdateEventListener"/>

  <bean id="validatePreInsertEventListener"
      class="org.hibernate.validator.event.ValidatePreInsertEventListener"/>

  
  <bean id="auditableObjectInterceptor"
      class="org.osaf.cosmo.model.hibernate.AuditableObjectInterceptor"/>
      
  <bean id="eventStampInterceptor"
      class="org.osaf.cosmo.model.hibernate.EventStampInterceptor"/>
  
  <bean id="cosmoHibernateInterceptor"
      class="org.osaf.cosmo.hibernate.CompoundInterceptor">
      <property name="interceptors">
        <list>
            <ref local="auditableObjectInterceptor"/>
            <ref local="eventStampInterceptor"/>
        </list>
    </property>
  </bean>
      
  <bean id="cosmoEntityFactory"
      class="org.osaf.cosmo.model.hibernate.HibEntityFactory"/>

  <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    <property name="lobHandler" ref="defaultLobHandler" />
    <property name="annotatedPackages">
        <list>
            <value>org.osaf.cosmo.model.hibernate</value>
        </list>
    </property>
    <property name="annotatedClasses">
        <list>
            <value>org.osaf.cosmo.model.hibernate.HibAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibAttributeTombstone</value>
            <value>org.osaf.cosmo.model.hibernate.HibAvailabilityItem</value>
            <value>org.osaf.cosmo.model.hibernate.HibBaseEventStamp</value>
            <value>org.osaf.cosmo.model.hibernate.HibBinaryAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibBooleanAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibCalendarAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibCalendarCollectionStamp</value>			
            <value>org.osaf.cosmo.model.hibernate.HibCollectionItem</value>
            <value>org.osaf.cosmo.model.hibernate.HibCollectionItemDetails</value>
            <value>org.osaf.cosmo.model.hibernate.HibCollectionSubscription</value>
            <value>org.osaf.cosmo.model.hibernate.HibContentData</value>
            <value>org.osaf.cosmo.model.hibernate.HibContentItem</value>
            <value>org.osaf.cosmo.model.hibernate.HibDecimalAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibDictionaryAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibEventExceptionStamp</value>
            <value>org.osaf.cosmo.model.hibernate.HibEventLogEntry</value> 
            <value>org.osaf.cosmo.model.hibernate.HibEventStamp</value>
            <value>org.osaf.cosmo.model.hibernate.HibFileItem</value>
            <value>org.osaf.cosmo.model.hibernate.HibFreeBusyItem</value>
            <value>org.osaf.cosmo.model.hibernate.HibHomeCollectionItem</value>
            <value>org.osaf.cosmo.model.hibernate.HibICalendarAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibICalendarItem</value>
            <value>org.osaf.cosmo.model.hibernate.HibIntegerAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibItem</value>
            <value>org.osaf.cosmo.model.hibernate.HibItemTombstone</value>
            <value>org.osaf.cosmo.model.hibernate.HibMessageStamp</value>
            <value>org.osaf.cosmo.model.hibernate.HibMultiValueStringAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibNoteItem</value>
            <value>org.osaf.cosmo.model.hibernate.HibPasswordRecovery</value>
            <value>org.osaf.cosmo.model.hibernate.HibPreference</value>
            <value>org.osaf.cosmo.model.hibernate.HibServerProperty</value>
            <value>org.osaf.cosmo.model.hibernate.HibStringAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibStamp</value>
            <value>org.osaf.cosmo.model.hibernate.HibStampTombstone</value>
            <value>org.osaf.cosmo.model.hibernate.HibTaskStamp</value>
            <value>org.osaf.cosmo.model.hibernate.HibTextAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibTicket</value>
            <value>org.osaf.cosmo.model.hibernate.HibTimestampAttribute</value>
            <value>org.osaf.cosmo.model.hibernate.HibTombstone</value>
            <value>org.osaf.cosmo.model.hibernate.HibUser</value>
            <value>org.osaf.cosmo.model.hibernate.HibXmlAttribute</value>
        </list>
    </property>
    <property name="entityInterceptor" ref="cosmoHibernateInterceptor"/>
    <property name="eventListeners">
      <map>
        <entry key="pre-update">
          <ref local="validatePreUpdateEventListener"/>
        </entry>
        <entry key="pre-insert">
          <ref local="validatePreInsertEventListener"/>
        </entry>
      </map>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.generate_statistics">true</prop>
        <prop key="hibernate.cache.use_query_cache">true</prop>
        <prop key="hibernate.cache.use_second_level_cache">true</prop>
        <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
        <prop key="hibernate.show_sql">false</prop>
        <prop key="hibernate.jdbc.batch_size">25</prop>
        <!-- configure in cosmo.propeties -->
        <prop key="hibernate.dialect">${cosmo.hibernate.dialect}</prop>
      </props>
    </property>
    <property name="dataSource" ref="jdbcDataSource"/>
  </bean>
	
  <!-- Hibernate statistics MBean -->
  <bean name="cosmo:name=hibernateStatistics" class="org.osaf.cosmo.hibernate.jmx.CosmoHibernateService">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>

  <!--  ICalendar Client Filter Manager 
        The ICalendar Client Filter Manager provides a way
        for cosmo to tailor the icalendar data depending
        on the client requesting the data.
  -->
  
  <!--  filter for iCal clients -->
  <bean id="ical3ClientFilter" 
        class="org.osaf.cosmo.icalendar.ICal3ClientFilter"/>
  
  <bean id="iCalendarClientFilterManager" 
        class="org.osaf.cosmo.icalendar.ICalendarClientFilterManager">
     <property name="clientFilters">
       <map>
         <entry key="ical2" value-ref="ical3ClientFilter"/>
         <entry key="ical3" value-ref="ical3ClientFilter"/>
       </map>
     </property>
  </bean>
  
  <!--  servlet filter to determine client and initialize the manager -->
  <bean id="clientICalendarFilterManagerFilter"
        class="org.osaf.cosmo.filters.ClientICalendarFilter">
        <property name="filterManager" ref="iCalendarClientFilterManager"/>
        <property name="clientKeyMap">
            <map>
                <entry key=".*iCal 2.*" value="ical2"/>
                <entry key=".*iCal 3.*" value="ical3"/>
            </map>
        </property>
  </bean>
  
  <!-- Define MBeans to export -->
  <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
      <property name="assembler" ref="assembler"/>
      <property name="namingStrategy" ref="namingStrategy"/>
      <property name="autodetect" value="true"/>
  </bean>

  <bean id="jmxAttributeSource"
        class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>

  <!-- will create management interface using annotation metadata -->
  <bean id="assembler"
        class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
      <property name="attributeSource" ref="jmxAttributeSource"/>
  </bean>
  
  <!-- will pick up the ObjectName from the annotation -->
  <bean id="namingStrategy"
        class="org.springframework.jmx.export.naming.MetadataNamingStrategy">
      <property name="attributeSource" ref="jmxAttributeSource"/>
  </bean>

  <!--  Transaction Definitions -->
  
  <!-- Transaction manager for a single Hibernate SessionFactory
       (alternative to JTA) -->
  <bean id="transactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory">
      <ref local="sessionFactory" />
    </property>
  </bean>
  
  <!--  AOP Configuration -->
  
  <!-- transactional advice -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <!-- the transactional semantics... -->
    <tx:attributes>
      <!-- getPasswordRecovery is only 'get' thats not read-only -->
      <tx:method name="getPasswordRecovery"/>
      
      <!--  checked exception OverlordDeletionException should cause rollback  -->
      <tx:method name="remove*" rollback-for="OverlordDeletionException"/>

      <!-- all methods starting with 'get', 'load', and 'find' are read-only -->
      <tx:method name="get*" read-only="true"/>
      <tx:method name="load*" read-only="true"/>
      <tx:method name="find*" read-only="true"/>
      
      <!-- other methods use the default transaction settings -->
      <tx:method name="*"/>
    </tx:attributes>
  </tx:advice>
  
  <!-- required for aspectj annotations support -->
  <aop:aspectj-autoproxy/>
  
  <!--  Monitors all service calls (ContentService for now) and
        logs all calls that aren't secured by advice in SecurityAdvice 
   -->
  <bean id="securityAdviceMonitorAspect" class="org.osaf.cosmo.security.aop.SecurityAdviceMonitor">
    <property name="order" value="4"/>
  </bean>
  
  <!--  Intercepts service calls and verifies current principal has sufficient
        privileges to execute api.  Aspect bean is annotated with aspecj
        annotations.
   -->
  <bean id="securityAspect" init-method="init" class="org.osaf.cosmo.security.aop.SecurityAdvice">
    <property name="securityManager">
      <ref local="securityManager" />
    </property>
    <property name="contentDao">
      <ref local="contentDao" />
    </property>
    <property name="userDao">
      <ref local="userDao" />
    </property>
    <property name="order" value="5"/>
    <property name="enabled" value="true"/>
  </bean>
  
  <!--  Intercepts service calls and logs events
   -->
  <bean id="eventLogAspect" init-method="init" class="org.osaf.cosmo.event.aop.EventLogAdvice">
    <property name="securityManager">
      <ref local="securityManager" />
    </property>
    <property name="eventLogDao">
      <ref local="eventLogDao" />
    </property>
    <property name="order" value="6"/>
    <property name="enabled" value="true"/>
  </bean>
  
  <!-- Timing advice, useful for timing operations -->
  <bean id="timingAdvice" class="org.springframework.aop.interceptor.PerformanceMonitorInterceptor">
    <property name="loggerName" value="org.osaf.cosmo.perf" />
  </bean>
  
  <!-- Interceptor that throws away curent Hibernate session 
       and binds new one on errors -->
  <bean id="throwAwayHibernateSessionAdvice" class="org.osaf.cosmo.hibernate.ThrowAwayHibernateSessionOnErrorInterceptor">
    <property name="sessionFactory">
      <ref local="sessionFactory" />
    </property>
  </bean>
 
  <!--  define advice for all service methods -->
  <aop:config>
      <aop:pointcut id="serviceOperation"
                  expression="execution(* org.osaf.cosmo.service.*Service.*(..))"/>
    
      <aop:advisor pointcut-ref="serviceOperation" order="1" advice-ref="timingAdvice"/>
      <aop:advisor pointcut-ref="serviceOperation" order="2" advice-ref="throwAwayHibernateSessionAdvice"/>
      <aop:advisor pointcut-ref="serviceOperation" order="3" advice-ref="txAdvice"/>
      
  </aop:config>
  
 
  <!-- data access objects -->

  <bean id="hibernateTemplate"
        class="org.springframework.orm.hibernate3.HibernateTemplate">
    <constructor-arg><ref bean="sessionFactory"/></constructor-arg>
  </bean>

  <bean id="itemPathTranslator"
        class="org.osaf.cosmo.dao.hibernate.DefaultItemPathTranslator">
    <constructor-arg><ref bean="hibernateTemplate"/></constructor-arg>
  </bean>

  <bean id="idGenerator"
        class="org.apache.commons.id.uuid.VersionFourGenerator" />
  
  <bean id="ticketKeyGenerator"
        class="org.apache.commons.id.random.SessionIdGenerator" />

  <bean id="serverPropertyDao"
        class="org.osaf.cosmo.dao.hibernate.ServerPropertyDaoImpl"
        init-method="init"
        destroy-method="destroy">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>

  <bean id="standardItemFilterProcessor"
        class="org.osaf.cosmo.dao.hibernate.query.StandardItemFilterProcessor" />

  <bean id="eventLogDao"
        class="org.osaf.cosmo.dao.hibernate.EventLogDaoImpl"
        init-method="init"
        destroy-method="destroy">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>

  <bean id="contentDao"
        class="org.osaf.cosmo.dao.hibernate.ContentDaoImpl"
        init-method="init"
        destroy-method="destroy">
    <property name="sessionFactory" ref="sessionFactory"/>
    <property name="itemPathTranslator" ref="itemPathTranslator"/>
    <property name="idGenerator">
      <ref local="idGenerator" />
    </property>
    <property name="ticketKeyGenerator">
      <ref local="ticketKeyGenerator" />
    </property>
    <property name="itemFilterProcessor">
      <ref local="standardItemFilterProcessor" />
    </property>
  </bean>

  <bean id="userDao"
        class="org.osaf.cosmo.dao.hibernate.UserDaoImpl"
        init-method="init"
        destroy-method="destroy">
    <property name="sessionFactory" ref="sessionFactory"/>
    <property name="idGenerator">
      <ref local="idGenerator" />
    </property>
  </bean>

  <bean id="calendarDao"
        class="org.osaf.cosmo.dao.hibernate.CalendarDaoImpl"
        init-method="init">
    <property name="sessionFactory" ref="sessionFactory"/>
    <property name="itemFilterProcessor">
      <ref local="standardItemFilterProcessor" />
    </property>
  </bean>
	
  <!-- services -->
  <bean id="passwordGenerator"
        class="org.apache.commons.id.random.SessionIdGenerator"/>

  <bean id="accountActivator"
        class="org.osaf.cosmo.service.account.EmailAccountActivator">
    <property name="idGenerator">
      <ref local="idGenerator" />
    </property>
    <property name="mailSender">
      <ref local="mailSender" />
    </property>
    <property name="messageSource">
      <ref local="messageSource" />
    </property>
    <property name="required">
        <value>${cosmo.service.account.requireActivation}</value>
    </property>
  </bean>
  
  <bean id="passwordRecoverer"
          class="org.osaf.cosmo.service.account.EmailPasswordRecoverer">
          
    <property name="idGenerator">
      <ref local="idGenerator" />
    </property>
    <property name="mailSender">
      <ref local="mailSender" />
    </property>
    <property name="messageSource">
      <ref local="messageSource" />
    </property>
  </bean>

  <bean id="ootbHelper"
        class="org.osaf.cosmo.service.account.OutOfTheBoxHelper">
    <property name="contentDao">
      <ref local="contentDao"/>
    </property>
    <property name="messageSource">
      <ref local="messageSource" />
    </property>
    <property name="entityFactory">
      <ref bean="cosmoEntityFactory"/>
    </property>
  </bean>

  <bean id="triageStatusQueryProcessor"
      class="org.osaf.cosmo.service.impl.StandardTriageStatusQueryProcessor">
    <property name="contentDao">
      <ref local="contentDao" />
    </property>
  </bean>
  

  <bean id="userService"
        class="org.osaf.cosmo.service.impl.StandardUserService"
        init-method="init"
        destroy-method="destroy">
    <property name="contentDao" ref="contentDao"/>
    <property name="userDao" ref="userDao"/>
    <property name="passwordGenerator" ref="passwordGenerator"/>
  </bean>
	
  <bean id="contentLockManager"
        class="org.osaf.cosmo.service.lock.SingleVMLockManager"/>

  <bean id="contentService"
        class="org.osaf.cosmo.service.impl.StandardContentService"
        init-method="init"
        destroy-method="destroy">
    <property name="calendarDao" ref="calendarDao"/>
    <property name="contentDao" ref="contentDao"/>
    <property name="lockManager" ref="contentLockManager"/>
    <property name="triageStatusQueryProcessor" ref="triageStatusQueryProcessor"/>
  </bean>

  <bean id="serverPropertyService"
        class="org.osaf.cosmo.service.impl.StandardServerPropertyService"
        init-method="init"
        destroy-method="destroy">
    <property name="serverPropertyDao" ref="serverPropertyDao"/>
  </bean>

  <bean id="calendarQueryProcessor"
        class="org.osaf.cosmo.calendar.query.impl.StandardCalendarQueryProcessor">
    <property name="calendarDao" ref="calendarDao"/>
    <property name="contentDao" ref="contentDao"/>
  </bean>
  
  <!-- general protocol/interface resources -->

  <bean id="serviceLocatorFactory"
        class="org.osaf.cosmo.server.ServiceLocatorFactory">
    <property name="atomPrefix" value="/atom"/>
    <property name="cmpPrefix" value="/cmp"/>
    <property name="davPrefix" value="/dav"/>
    <property name="morseCodePrefix" value="/mc"/>
    <property name="pimPrefix" value="/pim"/>
    <property name="webcalPrefix" value="/webcal"/>
    <property name="securityManager" ref="securityManager"/>
  </bean>

  <!-- dav protocol resources -->

  <bean id="davResourceFactory"
        class="org.osaf.cosmo.dav.StandardResourceFactory">
    <constructor-arg><ref local="contentService"/></constructor-arg>    
    <constructor-arg><ref local="userService"/></constructor-arg>
    <constructor-arg><ref local="securityManager"/></constructor-arg>
    <constructor-arg><ref local="cosmoEntityFactory"/></constructor-arg>
    <constructor-arg><ref local="calendarQueryProcessor"/></constructor-arg>
    <constructor-arg><ref local="iCalendarClientFilterManager"/></constructor-arg>
    
    <property name="schedulingEnabled" value="${cosmo.caldav.schedulingEnabled}"/>
  </bean>

  <bean id="davResourceLocatorFactory"
        class="org.osaf.cosmo.dav.StandardResourceLocatorFactory"/>

  <bean id="dav"
        class="org.osaf.cosmo.dav.servlet.StandardRequestHandler">
    <property name="resourceLocatorFactory" ref="davResourceLocatorFactory"/>
    <property name="resourceFactory" ref="davResourceFactory"/>
    <property name="entityFactory" ref="cosmoEntityFactory"/>
  </bean>

  <!-- atom protocol resources -->

  <bean id="abdera" class="org.apache.abdera.Abdera"/>

  <bean id="atomGeneratorFactory" class="org.osaf.cosmo.atom.generator.StandardGeneratorFactory"
            init-method="init">
    <property name="abdera"><ref local="abdera"/></property>
    <property name="contentFactory">
      <bean class="org.osaf.cosmo.atom.generator.ContentFactory"/>
    </property>
    <property name="contentService">
      <ref local="contentService"/>
    </property>
    <property name="securityManager">
      <ref local="securityManager"/>
    </property>
  </bean>
	
  <bean id="atomTargetResolver" class="org.osaf.cosmo.atom.provider.StandardTargetResolver"
            init-method="init">
    <property name="contentService">
      <ref local="contentService"/>
    </property>
    <property name="userService">
      <ref local="userService"/>
    </property>
  </bean>
	
  <bean id="atomBaseAdapter" class="org.osaf.cosmo.atom.provider.BaseCollectionAdapter"
        init-method="init" abstract="true">
    <property name="generatorFactory"><ref local="atomGeneratorFactory"/></property>
    <property name="serviceLocatorFactory">
      <ref local="serviceLocatorFactory"/>
    </property>
    <property name="entityFactory" ref="cosmoEntityFactory"/>
  </bean>

  <bean id="atomStandardProcessorFactory"
        class="org.osaf.cosmo.atom.processor.StandardProcessorFactory">
    <property name="entityFactory" ref="cosmoEntityFactory"/>
  </bean>

  <bean id="atomItemAdapter"
        class="org.osaf.cosmo.atom.provider.ItemCollectionAdapter"
        init-method="init" parent="atomBaseAdapter">
    <property name="processorFactory">
      <ref local="atomStandardProcessorFactory"/>
    </property>
    <property name="contentService">
      <ref local="contentService"/>
    </property>
  </bean>
  
  <bean id="atomDetachedItemAdapter"
        class="org.osaf.cosmo.atom.provider.DetachedItemCollectionAdapter"
        init-method="init" parent="atomItemAdapter"/>

  <bean id="atomExpandedItemAdapter"
        class="org.osaf.cosmo.atom.provider.ExpandedItemCollectionAdapter"
        init-method="init" parent="atomItemAdapter"/>

  <bean id="atomSubscriptionAdapter"
        class="org.osaf.cosmo.atom.provider.SubscriptionCollectionAdapter"
        init-method="init" parent="atomBaseAdapter">
    <property name="userService">
      <ref local="userService"/>
    </property>
  </bean>

  <bean id="atomPreferencesAdapter"
        class="org.osaf.cosmo.atom.provider.PreferencesCollectionAdapter"
        init-method="init" parent="atomBaseAdapter">
    <property name="userService">
      <ref local="userService"/>
    </property>
  </bean>

  <bean id="atomTicketsAdapter"
        class="org.osaf.cosmo.atom.provider.TicketsCollectionAdapter"
        init-method="init" parent="atomBaseAdapter">
    <property name="contentService">
      <ref local="contentService"/>
    </property>
    <property name="securityManager">
      <ref local="securityManager"/>
    </property>
  </bean>

  <bean id="atomUserAdapter" class="org.osaf.cosmo.atom.provider.UserCollectionAdapter"
        init-method="init" parent="atomBaseAdapter"/>

  <bean id="atomWorkspaceManager" class="org.osaf.cosmo.atom.provider.StandardWorkspaceManager">
	 <property name="itemAdapter">
       <ref local="atomItemAdapter"/>
     </property>
     <property name="detachedItemAdapter">
       <ref local="atomDetachedItemAdapter"/>
     </property>
     <property name="expandedItemAdapter">
       <ref local="atomExpandedItemAdapter"/>
     </property>
     <property name="subscriptionAdapter">
       <ref local="atomSubscriptionAdapter"/>
     </property>
     <property name="preferencesAdapter">
        <ref local="atomPreferencesAdapter"/>
     </property>
     <property name="ticketsAdapter">
       <ref local="atomTicketsAdapter"/>
     </property>
     <property name="userAdapter">
       <ref local="atomUserAdapter"/>
     </property>
  </bean>
	
  <bean id="atomProvider"
        class="org.osaf.cosmo.atom.provider.StandardProvider">
    <property name="abdera"><ref local="abdera"/></property>
    <property name="workspaceManager"><ref local="atomWorkspaceManager"/></property>
    <property name="generatorFactory"><ref local="atomGeneratorFactory"/></property>
    <property name="serviceLocatorFactory">
      <ref local="serviceLocatorFactory"/>
    </property>
    <property name="targetResolver">
      <ref local="atomTargetResolver"/>
    </property>
  </bean>

  <!-- morse code protocol resources -->

  <bean id="morseCodeController"
        class="org.osaf.cosmo.mc.StandardMorseCodeController"
        init-method="init">
    <property name="contentService">
      <ref local="contentService"/>
    </property>
    <property name="userService">
      <ref local="userService"/>
    </property>
    <property name="securityManager">
      <ref local="securityManager"/>
    </property>
    <property name="entityFactory" ref="cosmoEntityFactory"/>
  </bean>

  <!-- a helper for setting up the database schema and loading seed
       data -->
  <bean id="dbInitializer"
      init-method="initialize"
        class="org.osaf.cosmo.db.DbInitializer">
    <property name="userService" ref="userService"/>
    <property name="serverPropertyService" ref="serverPropertyService"/>
    <property name="localSessionFactory" ref="&amp;sessionFactory"/>
    <property name="dataSource" ref="jdbcDataSource"/>
    <property name="validateSchema" value="true"/>
    <property name="rootLoginUrl" value="/account/view"/>
    <property name="entityFactory" ref="cosmoEntityFactory"/>
  </bean>

  <!-- the servlet context configurer, which is used instead of
       spring's servlet context export mechanism because config
       information needs to be loaded from the database -->

  <bean id="servletContextConfigurer"
        class="org.osaf.cosmo.ui.config.ServletContextConfigurer">
    <property name="userService" ref="userService"/>
  </bean>

  <!-- authentication resources -->

  <bean id="userDetailsService"
        class="org.osaf.cosmo.acegisecurity.userdetails.CosmoUserDetailsService">
     <property name="userDao" ref="userDao"/>
  </bean>

  <bean id="passwordEncoder"
        class="org.springframework.security.providers.encoding.Md5PasswordEncoder"/>

  <bean id="daoAuthenticationProvider"
        class="org.springframework.security.providers.dao.DaoAuthenticationProvider">
    <property name="userDetailsService">
      <ref local="userDetailsService"/>
    </property>
    <property name="passwordEncoder">
      <ref local="passwordEncoder"/>
    </property>
  </bean>

  <bean id="anonymousAuthenticationProvider"
        class="org.springframework.security.providers.anonymous.AnonymousAuthenticationProvider">
    <property name="key" value="badgerbadgerbadger"/>
  </bean>

  <bean id="ticketAuthenticationProvider"
        class="org.osaf.cosmo.acegisecurity.providers.ticket.TicketAuthenticationProvider">
    <property name="contentDao" ref="contentDao"/>
  </bean>
  
  <bean id="wsseAuthenticationProvider"
        class="org.osaf.cosmo.acegisecurity.providers.wsse.WsseAuthenticationProvider">
    <property name="userDao" ref="userDao"/>
  </bean>

  <bean id="authenticationManager"
        class="org.springframework.security.providers.ProviderManager">
    <property name="providers">
      <list>
        <ref local="daoAuthenticationProvider"/>
        <ref local="anonymousAuthenticationProvider"/>
        <ref local="ticketAuthenticationProvider"/>
        <ref local="wsseAuthenticationProvider"/>
      </list>
    </property>
  </bean>

  <!-- authorization resources -->

  <bean id="ticketVoter"
        class="org.osaf.cosmo.acegisecurity.providers.ticket.TicketVoter"/>

  <bean id="roleVoter" class="org.springframework.security.vote.RoleVoter"/>

  <bean id="defaultAccessDecisionManager"
        class="org.springframework.security.vote.AffirmativeBased">
    <property name="allowIfAllAbstainDecisions" value="false"/>
    <property name="decisionVoters">
      <list>
        <ref bean="roleVoter"/>
      </list>
    </property>
  </bean>
  
  <!--  AccessDecisionManager that verifies principal has access to
        user paths -->
  <bean id="userPathAccessDecisionManager" 
        class="org.osaf.cosmo.acegisecurity.UserPathAccessDecisionManager"/>

  <!-- security facade resources -->

  <bean id="securityManager"
        class="org.osaf.cosmo.security.impl.CosmoSecurityManagerImpl">
    <property name="authenticationManager">
      <ref local="authenticationManager"/>
    </property>
  </bean>

  <!-- filter that checks for Ticket authentication and clears.  To be used
       after the session integration filter to prevent ticket authentication
       from sticking -->
  <bean id="protocolTicketAuthenticationClearingFilter"
        class="org.osaf.cosmo.acegisecurity.providers.ticket.TicketAuthenticationClearingFilter"/>
  

  <bean id="defaultFilterInvocationInterceptor"
         class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
     <property name="authenticationManager" ref="authenticationManager"/>
     <property name="accessDecisionManager" ref="defaultAccessDecisionManager"/>
     <property name="objectDefinitionSource">
       <value>
         CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
         PATTERN_TYPE_APACHE_ANT
         /account/new=ROLE_ANONYMOUS
         /account/signup=ROLE_ANONYMOUS
         /account=ROLE_ROOT,ROLE_USER
         /account/view=ROLE_ROOT,ROLE_USER
         /account/update=ROLE_ROOT,ROLE_USER
         /account/activate/*=ROLE_ANONYMOUS, ROLE_USER, ROLE_ROOT
         /account/deleted=ROLE_ANONYMOUS, ROLE_USER, ROLE_ROOT
         /account/password/reset/*=ROLE_ANONYMOUS, ROLE_USER, ROLE_ROOT
         /account/password/recover=ROLE_ANONYMOUS, ROLE_USER, ROLE_ROOT
         /account/activation/recover=ROLE_ANONYMOUS, ROLE_USER, ROLE_ROOT
         /login=ROLE_ANONYMOUS, ROLE_USER, ROLE_ROOT
         /signup=ROLE_ANONYMOUS
         /welcome=ROLE_ANONYMOUS, ROLE_USER, ROLE_ROOT
         /security_check=ROLE_ANONYMOUS
         /loginfailed=ROLE_ANONYMOUS
         /logout=ROLE_ROOT,ROLE_USER
         /browse/**=ROLE_USER, ROLE_ROOT
         /admin/status/**=ROLE_ROOT
         /admin/user/**=ROLE_ROOT
         /error=ROLE_ANONYMOUS,ROLE_USER,ROLE_ROOT
         /error/**=ROLE_ANONYMOUS,ROLE_USER,ROLE_ROOT
         /help/privacy=ROLE_ROOT,ROLE_USER,ROLE_ANONYMOUS
         /help/about=ROLE_ROOT,ROLE_USER,ROLE_ANONYMOUS
         /help/tos=ROLE_ROOT,ROLE_USER,ROLE_ANONYMOUS
         /help=ROLE_ROOT,ROLE_USER
         /help/**=ROLE_ROOT,ROLE_USER
         /**=ROLE_ROOT
       </value>
     </property>
   </bean>

   <!-- filter chain that kicks off request-time processing -->

   <bean id="defaultFilterChainProxy" class="org.springframework.security.util.FilterChainProxy">
      <security:filter-chain-map path-type="ant">
          <security:filter-chain pattern="/**" filters="defaultHttpSessionContextIntegrationFilter,protocolTicketAuthenticationClearingFilter,defaultAnonymousProcessingFilter,defaultExceptionTranslationFilter,defaultFilterInvocationInterceptor"/>
      </security:filter-chain-map>
   </bean>
   
   <bean id="webuiFilterChainProxy" class="org.springframework.security.util.FilterChainProxy">
      <security:filter-chain-map path-type="ant">
          <security:filter-chain pattern="/**" filters="defaultHttpSessionContextIntegrationFilter,protocolTicketAuthenticationClearingFilter,webuiFormBasedProcessingFilter,defaultExceptionTranslationFilter,defaultFilterInvocationInterceptor"/>
      </security:filter-chain-map>
   </bean>

  <!-- filter that integrates SecurityContext into HTTP Session -->

  <bean id="defaultHttpSessionContextIntegrationFilter"
        class="org.springframework.security.context.HttpSessionContextIntegrationFilter"/>

  <!-- filter that performs form-based authentication -->

  <bean id="defaultFormBasedAuthenticationEntryPoint"
        class="org.springframework.security.ui.webapp.AuthenticationProcessingFilterEntryPoint">
    <property name="loginFormUrl" value="/login"/>
    <property name="forceHttps" value="false"/>
  </bean>

  <bean id="webuiFormBasedProcessingFilter"
        class="org.osaf.cosmo.acegisecurity.ui.webapp.CosmoAuthenticationProcessingFilter">
    <property name="authenticationManager" ref="authenticationManager"/>
    <property name="filterProcessesUrl" value="/security_check"/>
    <property name="authenticationFailureUrl" value="/loginfailed"/>
    <property name="cosmoDefaultLoginUrl" value="/pim"/>
  </bean>

  <!-- filter that performs anonymous authentication -->

  <bean id="defaultAnonymousProcessingFilter"
        class="org.springframework.security.providers.anonymous.AnonymousProcessingFilter">
    <property name="key" value="badgerbadgerbadger"/>
    <property name="userAttribute" value="anonymous,ROLE_ANONYMOUS"/>
  </bean>

  <!-- filter that converts authen/authz exceptions to web pages -->

  <bean id="defaultExceptionTranslationFilter"
        class="org.springframework.security.ui.ExceptionTranslationFilter">
    <property name="authenticationEntryPoint">
      <ref local="defaultFormBasedAuthenticationEntryPoint"/>
    </property>
  </bean>

  <!-- security beans for protocol access -->
  <bean id="dummyAccessDecisionMaanger"
        class="org.osaf.cosmo.acegisecurity.DummyAccessDecisionManager"/>

  <bean id="protocolHttpRequestContextIntegrationFilter"
        class="org.osaf.cosmo.acegisecurity.context.HttpRequestContextIntegrationFilter"/>

  <bean id="protocolAuthenticationEntryPoint"
        class="org.osaf.cosmo.acegisecurity.ui.CosmoAuthenticationEntryPoint"/>

  <bean id="protocolTicketProcessingFilter"
        class="org.osaf.cosmo.acegisecurity.providers.ticket.TicketProcessingFilter"/>

  <bean id="protocolExtraTicketProcessingFilter"
        class="org.osaf.cosmo.acegisecurity.providers.ticket.ExtraTicketProcessingFilter">
    <property name="securityManager">
      <ref local="securityManager" />
    </property>
    <property name="contentDao">
      <ref local="contentDao" />
    </property>
  </bean>

  <bean id="protocolBasicProcessingFilter"
        class="org.springframework.security.ui.basicauth.BasicProcessingFilter">
    <property name="authenticationManager" ref="authenticationManager"/>
    <property name="authenticationEntryPoint" ref="protocolAuthenticationEntryPoint"/>
  </bean>

  <bean id="protocolExceptionTranslationFilter"
        class="org.springframework.security.ui.ExceptionTranslationFilter">
    <property name="authenticationEntryPoint" ref="protocolAuthenticationEntryPoint"/>
    <property name="createSessionAllowed" value="false"/>
  </bean>

  <bean id="protocolWsseProcessingFilter"
        class="org.osaf.cosmo.acegisecurity.providers.wsse.WsseTokenProcessingFilter"/>
  
  <!-- Logging resources -->
  <bean id="httpLoggingFormat" class="java.lang.String">
    <constructor-arg type="java.lang.String" value="${cosmo.log.HttpLoggingFilter.format}"/>
  </bean>
   
  <!--  Retry Filter -->
  <bean id="retryFilter" class="org.osaf.cosmo.filters.RetryFilter">
    <property name="maxRetries" value="10"/>
    <property name="methods">
      <list>
        <value>POST</value>
        <value>PUT</value>
        <value>DELETE</value>
        <value>MKCALENDAR</value>
      </list>
    </property>
    <property name="exceptions">
      <list>
        <value>org.springframework.dao.ConcurrencyFailureException</value>
        <value>org.springframework.dao.DataIntegrityViolationException</value>
      </list>
    </property>
  </bean>
   
  <!-- give JSP tag functions access to config properties -->
  <bean id="jspConfigProps" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="targetClass" value="org.osaf.cosmo.ui.TagFunctions"/>
    <property name="targetMethod" value="setPropertyPlaceholderConfigurer"/>
    <property name="arguments">
        <list><ref bean="propertyPlaceholderConfigurer"/></list>
    </property>
  </bean>

</beans>
