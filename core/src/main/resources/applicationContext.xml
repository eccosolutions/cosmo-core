<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2005-2006 Open Source Applications Foundation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">

  <bean id="messageSource"
        class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="MessageResources"/>
  </bean>


    <!-- TODO: We did have a ValidatePreUpdateEventListener and ValidatePreInsertEventListener configured too -->

  <bean id="cosmoEntityFactory"
      class="org.osaf.cosmo.model.hibernate.HibEntityFactory"/>

    <!-- TODO: sessionFactory was configured with the following properties...
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.generate_statistics">true</prop>
        <prop key="hibernate.cache.use_query_cache">true</prop>
        <prop key="hibernate.cache.use_second_level_cache">true</prop>
        <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
        <prop key="hibernate.show_sql">false</prop>
        <prop key="hibernate.jdbc.batch_size">25</prop>
        <prop key="hibernate.dialect">${cosmo.hibernate.dialect}</prop>
      </props>
    </property>
    -->

  <!--  ICalendar Client Filter Manager
        The ICalendar Client Filter Manager provides a way
        for cosmo to tailor the icalendar data depending
        on the client requesting the data.
  -->

  <!--  filter for iCal clients -->
  <bean id="ical3ClientFilter"
        class="org.osaf.cosmo.icalendar.ICal3ClientFilter"/>

  <!-- Define MBeans to export -->
  <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
      <property name="assembler" ref="assembler"/>
      <property name="namingStrategy" ref="namingStrategy"/>
      <property name="autodetect" value="true"/>
  </bean>

  <bean id="jmxAttributeSource"
        class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>

  <!-- will create management interface using annotation metadata -->
  <bean id="assembler"
        class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
      <property name="attributeSource" ref="jmxAttributeSource"/>
  </bean>

  <!-- will pick up the ObjectName from the annotation -->
  <bean id="namingStrategy"
        class="org.springframework.jmx.export.naming.MetadataNamingStrategy">
      <property name="attributeSource" ref="jmxAttributeSource"/>
  </bean>

  <!--  AOP Configuration -->

  <!-- transactional advice -->

    <tx:annotation-driven/>

  <!-- required for aspectj annotations support -->
  <aop:aspectj-autoproxy/>


  <!-- Timing advice, useful for timing operations -->
  <bean id="timingAdvice" class="org.springframework.aop.interceptor.PerformanceMonitorInterceptor">
    <property name="loggerName" value="org.osaf.cosmo.perf" />
  </bean>

  <!-- Interceptor that throws away curent Hibernate session
       and binds new one on errors -->
  <bean id="throwAwayHibernateSessionAdvice" class="org.osaf.cosmo.hibernate.ThrowAwayHibernateSessionOnErrorInterceptor">
  </bean>

  <!--  define advice for all service methods -->
  <aop:config>
      <aop:pointcut id="serviceOperation"
                  expression="execution(* org.osaf.cosmo.service.*Service.*(..))"/>

      <aop:advisor pointcut-ref="serviceOperation" order="1" advice-ref="timingAdvice"/>
      <aop:advisor pointcut-ref="serviceOperation" order="2" advice-ref="throwAwayHibernateSessionAdvice"/>

  </aop:config>


  <!-- data access objects -->

  <bean id="itemPathTranslator"
        class="org.osaf.cosmo.dao.hibernate.DefaultItemPathTranslator">
  </bean>

  <bean id="serverPropertyDao"
        class="org.osaf.cosmo.dao.hibernate.ServerPropertyDaoImpl"
        init-method="init"
        destroy-method="destroy">
  </bean>

  <bean id="standardItemFilterProcessor"
        class="org.osaf.cosmo.dao.hibernate.query.StandardItemFilterProcessor" />


  <bean id="contentDao"
        class="org.osaf.cosmo.dao.hibernate.ContentDaoImpl"
        init-method="init"
        destroy-method="destroy">
    <property name="itemPathTranslator" ref="itemPathTranslator"/>
    <property name="itemFilterProcessor" ref="standardItemFilterProcessor"/>
  </bean>

  <bean id="userDao"
        class="org.osaf.cosmo.dao.hibernate.UserDaoImpl"
        init-method="init"
        destroy-method="destroy">
  </bean>

  <bean id="calendarDao"
        class="org.osaf.cosmo.dao.hibernate.CalendarDaoImpl"
        init-method="init">
    <property name="itemFilterProcessor" ref="standardItemFilterProcessor"/>
  </bean>

  <!-- services -->
  <bean id="ootbHelper"
        class="org.osaf.cosmo.service.account.OutOfTheBoxHelper">
    <property name="contentDao" ref="contentDao"/>
    <property name="messageSource" ref="messageSource"/>
    <property name="entityFactory" ref="cosmoEntityFactory"/>
  </bean>


  <bean id="userService"
        class="org.osaf.cosmo.service.impl.StandardUserService"
        init-method="init"
        destroy-method="destroy">
    <property name="contentDao" ref="contentDao"/>
    <property name="userDao" ref="userDao"/>
  </bean>

  <bean id="contentLockManager"
        class="org.osaf.cosmo.service.lock.SingleVMLockManager"/>

  <bean id="contentService"
        class="org.osaf.cosmo.service.impl.StandardContentService"
        init-method="init"
        destroy-method="destroy">
    <property name="calendarDao" ref="calendarDao"/>
    <property name="contentDao" ref="contentDao"/>
    <property name="lockManager" ref="contentLockManager"/>
  </bean>

  <bean id="serverPropertyService"
        class="org.osaf.cosmo.service.impl.StandardServerPropertyService"
        init-method="init"
        destroy-method="destroy">
    <property name="serverPropertyDao" ref="serverPropertyDao"/>
  </bean>

  <bean id="calendarQueryProcessor"
        class="org.osaf.cosmo.calendar.query.impl.StandardCalendarQueryProcessor">
    <property name="calendarDao" ref="calendarDao"/>
    <property name="contentDao" ref="contentDao"/>
  </bean>






  <!-- the servlet context configurer, which is used instead of
       spring's servlet context export mechanism because config
       information needs to be loaded from the database -->

  <bean id="servletContextConfigurer"
        class="org.osaf.cosmo.ui.config.ServletContextConfigurer">
    <property name="userService" ref="userService"/>
  </bean>
</beans>
