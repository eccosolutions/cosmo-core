<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2005-2006 Open Source Applications Foundation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">

  <bean id="messageSource"
        class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename" value="MessageResources"/>
  </bean>

  <!-- load the cosmo properties file and make the cosmo
       config properties available to other spring beans -->
  <jee:jndi-lookup id="cosmoConfigPath" jndi-name="java:comp/env/cosmo/config"/>

  <bean id="propertyPlaceholderConfigurer"
        class="org.osaf.cosmo.spring.CosmoPropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <ref bean="cosmoConfigPath"/>
      </list>
    </property>
  </bean>


    <!-- TODO: We did have a ValidatePreUpdateEventListener and ValidatePreInsertEventListener configured too -->

  <bean id="cosmoEntityFactory"
      class="org.osaf.cosmo.model.hibernate.HibEntityFactory"/>

    <!-- TODO: sessionFactory was configured with the following properties...
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.generate_statistics">true</prop>
        <prop key="hibernate.cache.use_query_cache">true</prop>
        <prop key="hibernate.cache.use_second_level_cache">true</prop>
        <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
        <prop key="hibernate.show_sql">false</prop>
        <prop key="hibernate.jdbc.batch_size">25</prop>
        <prop key="hibernate.dialect">${cosmo.hibernate.dialect}</prop>
      </props>
    </property>
    -->

    <bean id="configurableEntitySupport" class="org.osaf.cosmo.spring.ConfigurableEntitySupport"/>

  <!-- Hibernate statistics MBean -->
  <bean name="cosmo:name=hibernateStatistics" class="org.osaf.cosmo.hibernate.jmx.CosmoHibernateService">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>

  <!--  ICalendar Client Filter Manager
        The ICalendar Client Filter Manager provides a way
        for cosmo to tailor the icalendar data depending
        on the client requesting the data.
  -->

  <!--  filter for iCal clients -->
  <bean id="ical3ClientFilter"
        class="org.osaf.cosmo.icalendar.ICal3ClientFilter"/>

  <bean id="iCalendarClientFilterManager"
        class="org.osaf.cosmo.icalendar.ICalendarClientFilterManager">
     <property name="clientFilters">
       <map>
         <entry key="ical2" value-ref="ical3ClientFilter"/>
         <entry key="ical3" value-ref="ical3ClientFilter"/>
       </map>
     </property>
  </bean>

  <!--  servlet filter to determine client and initialize the manager -->
  <bean id="clientICalendarFilterManagerFilter"
        class="org.osaf.cosmo.filters.ClientICalendarFilter">
        <property name="filterManager" ref="iCalendarClientFilterManager"/>
        <property name="clientKeyMap">
            <map>
                <entry key=".*iCal 2.*" value="ical2"/>
                <entry key=".*iCal 3.*" value="ical3"/>
            </map>
        </property>
  </bean>

  <!-- Define MBeans to export -->
  <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
      <property name="assembler" ref="assembler"/>
      <property name="namingStrategy" ref="namingStrategy"/>
      <property name="autodetect" value="true"/>
  </bean>

  <bean id="jmxAttributeSource"
        class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>

  <!-- will create management interface using annotation metadata -->
  <bean id="assembler"
        class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
      <property name="attributeSource" ref="jmxAttributeSource"/>
  </bean>

  <!-- will pick up the ObjectName from the annotation -->
  <bean id="namingStrategy"
        class="org.springframework.jmx.export.naming.MetadataNamingStrategy">
      <property name="attributeSource" ref="jmxAttributeSource"/>
  </bean>

  <!--  AOP Configuration -->

  <!-- transactional advice -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <!-- the transactional semantics... -->
    <tx:attributes>
      <!-- getPasswordRecovery is only 'get' thats not read-only -->
      <tx:method name="getPasswordRecovery"/>

      <!--  checked exception OverlordDeletionException should cause rollback  -->
      <tx:method name="remove*" rollback-for="OverlordDeletionException"/>

      <!-- all methods starting with 'get', 'load', and 'find' are read-only -->
      <tx:method name="get*" read-only="true"/>
      <tx:method name="load*" read-only="true"/>
      <tx:method name="find*" read-only="true"/>

      <!-- other methods use the default transaction settings -->
      <tx:method name="*"/>
    </tx:attributes>
  </tx:advice>

    <tx:annotation-driven/>

  <!-- required for aspectj annotations support -->
  <aop:aspectj-autoproxy/>

  <!--  Monitors all service calls (ContentService for now) and
        logs all calls that aren't secured by advice in SecurityAdvice
   -->
  <bean id="securityAdviceMonitorAspect" class="org.osaf.cosmo.security.aop.SecurityAdviceMonitor">
    <property name="order" value="4"/>
  </bean>

  <!--  Intercepts service calls and verifies current principal has sufficient
        privileges to execute api.  Aspect bean is annotated with aspecj
        annotations.
   -->
  <bean id="securityAspect" init-method="init" class="org.osaf.cosmo.security.aop.SecurityAdvice">
    <property name="securityManager" ref="securityManager"/>
    <property name="contentDao" ref="contentDao"/>
    <property name="userDao" ref="userDao"/>
    <property name="order" value="5"/>
    <property name="enabled" value="true"/>
  </bean>

  <!--  Intercepts service calls and logs events
   -->
  <bean id="eventLogAspect" init-method="init" class="org.osaf.cosmo.event.aop.EventLogAdvice">
    <property name="securityManager" ref="securityManager"/>
    <property name="eventLogDao" ref="eventLogDao"/>
    <property name="order" value="6"/>
    <property name="enabled" value="true"/>
  </bean>

  <!-- Timing advice, useful for timing operations -->
  <bean id="timingAdvice" class="org.springframework.aop.interceptor.PerformanceMonitorInterceptor">
    <property name="loggerName" value="org.osaf.cosmo.perf" />
  </bean>

  <!-- Interceptor that throws away curent Hibernate session
       and binds new one on errors -->
  <bean id="throwAwayHibernateSessionAdvice" class="org.osaf.cosmo.hibernate.ThrowAwayHibernateSessionOnErrorInterceptor">
  </bean>

  <!--  define advice for all service methods -->
  <aop:config>
      <aop:pointcut id="serviceOperation"
                  expression="execution(* org.osaf.cosmo.service.*Service.*(..))"/>

      <aop:advisor pointcut-ref="serviceOperation" order="1" advice-ref="timingAdvice"/>
      <aop:advisor pointcut-ref="serviceOperation" order="2" advice-ref="throwAwayHibernateSessionAdvice"/>
      <aop:advisor pointcut-ref="serviceOperation" order="3" advice-ref="txAdvice"/>

  </aop:config>


  <!-- data access objects -->

  <bean id="itemPathTranslator"
        class="org.osaf.cosmo.dao.hibernate.DefaultItemPathTranslator">
  </bean>

  <bean id="serverPropertyDao"
        class="org.osaf.cosmo.dao.hibernate.ServerPropertyDaoImpl"
        init-method="init"
        destroy-method="destroy">
  </bean>

  <bean id="standardItemFilterProcessor"
        class="org.osaf.cosmo.dao.hibernate.query.StandardItemFilterProcessor" />

  <bean id="eventLogDao"
        class="org.osaf.cosmo.dao.hibernate.EventLogDaoImpl"
        init-method="init"
        destroy-method="destroy">
  </bean>

  <bean id="contentDao"
        class="org.osaf.cosmo.dao.hibernate.ContentDaoImpl"
        init-method="init"
        destroy-method="destroy">
    <property name="itemPathTranslator" ref="itemPathTranslator"/>
    <property name="itemFilterProcessor" ref="standardItemFilterProcessor"/>
  </bean>

  <bean id="userDao"
        class="org.osaf.cosmo.dao.hibernate.UserDaoImpl"
        init-method="init"
        destroy-method="destroy">
  </bean>

  <bean id="calendarDao"
        class="org.osaf.cosmo.dao.hibernate.CalendarDaoImpl"
        init-method="init">
    <property name="itemFilterProcessor" ref="standardItemFilterProcessor"/>
  </bean>

  <!-- services -->
  <bean id="ootbHelper"
        class="org.osaf.cosmo.service.account.OutOfTheBoxHelper">
    <property name="contentDao" ref="contentDao"/>
    <property name="messageSource" ref="messageSource"/>
    <property name="entityFactory" ref="cosmoEntityFactory"/>
  </bean>


  <bean id="userService"
        class="org.osaf.cosmo.service.impl.StandardUserService"
        init-method="init"
        destroy-method="destroy">
    <property name="contentDao" ref="contentDao"/>
    <property name="userDao" ref="userDao"/>
  </bean>

  <bean id="contentLockManager"
        class="org.osaf.cosmo.service.lock.SingleVMLockManager"/>

  <bean id="contentService"
        class="org.osaf.cosmo.service.impl.StandardContentService"
        init-method="init"
        destroy-method="destroy">
    <property name="calendarDao" ref="calendarDao"/>
    <property name="contentDao" ref="contentDao"/>
    <property name="lockManager" ref="contentLockManager"/>
  </bean>

  <bean id="serverPropertyService"
        class="org.osaf.cosmo.service.impl.StandardServerPropertyService"
        init-method="init"
        destroy-method="destroy">
    <property name="serverPropertyDao" ref="serverPropertyDao"/>
  </bean>

  <bean id="calendarQueryProcessor"
        class="org.osaf.cosmo.calendar.query.impl.StandardCalendarQueryProcessor">
    <property name="calendarDao" ref="calendarDao"/>
    <property name="contentDao" ref="contentDao"/>
  </bean>

  <!-- general protocol/interface resources -->

  <bean id="serviceLocatorFactory"
        class="org.osaf.cosmo.server.ServiceLocatorFactory">
    <property name="atomPrefix" value="/atom"/>
    <property name="cmpPrefix" value="/cmp"/>
    <property name="davPrefix" value="/dav"/>
    <property name="morseCodePrefix" value="/mc"/>
    <property name="pimPrefix" value="/pim"/>
    <property name="webcalPrefix" value="/webcal"/>
    <property name="securityManager" ref="securityManager"/>
  </bean>

  <!-- dav protocol resources -->





  <!-- the servlet context configurer, which is used instead of
       spring's servlet context export mechanism because config
       information needs to be loaded from the database -->

  <bean id="servletContextConfigurer"
        class="org.osaf.cosmo.ui.config.ServletContextConfigurer">
    <property name="userService" ref="userService"/>
  </bean>



  <bean id="securityManager"
        class="org.osaf.cosmo.security.impl.CosmoSecurityManagerImpl">
    <!--<property name="authenticationManager">-->
      <!--<ref bean="authenticationManager"/>-->
    <!--</property>-->
  </bean>


  <!-- Logging resources -->
  <bean id="httpLoggingFormat" class="java.lang.String">
    <constructor-arg type="java.lang.String" value="${cosmo.log.HttpLoggingFilter.format}"/>
  </bean>

  <!--  Retry Filter -->
  <bean id="retryFilter" class="org.osaf.cosmo.filters.RetryFilter">
    <property name="maxRetries" value="10"/>
    <property name="methods">
      <list>
        <value>POST</value>
        <value>PUT</value>
        <value>DELETE</value>
        <value>MKCALENDAR</value>
      </list>
    </property>
    <property name="exceptions">
      <list>
        <value>org.springframework.dao.ConcurrencyFailureException</value>
        <value>org.springframework.dao.DataIntegrityViolationException</value>
      </list>
    </property>
  </bean>

  <!-- give JSP tag functions access to config properties -->
  <bean id="jspConfigProps" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="targetClass" value="org.osaf.cosmo.ui.TagFunctions"/>
    <property name="targetMethod" value="setPropertyPlaceholderConfigurer"/>
    <property name="arguments">
        <list><ref bean="propertyPlaceholderConfigurer"/></list>
    </property>
  </bean>

</beans>
